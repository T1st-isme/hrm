// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Employee {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  firstName            String
  lastName             String
  email                String             @unique
  password             String
  profilePicture       String?            @default("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png")
  contactNumber        String?
  fullName             String
  dateOfBirth          DateTime
  address              String
  employmentStartDate  DateTime           @default(now())
  jobTitle             String
  department           Department?        @relation(fields: [departmentId], references: [id])
  departmentId         String?            @db.ObjectId
  salary               Float?
  status               EmployeeStatus     @default(IN_WORKING)
  leaveRequests        LeaveRequest[]
  payrolls             Payroll[]
  employeeRoles        EmployeeRole[]
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}

enum EmployeeStatus {
  IN_WORKING
  LAY_OFF
  RESIGNED
  RETIRED
  ON_LEAVE
}

model LeaveRequest {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  employee       Employee @relation(fields: [employeeId], references: [id])
  employeeId     String   @db.ObjectId
  startDate      DateTime
  endDate        DateTime
  status         LeaveStatus @default(PENDING)
  reason         String?
}

model Department {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  image          String?
  description    String?
  employees      Employee[]
}

model Role {
  id             String             @id @default(auto()) @map("_id") @db.ObjectId
  name           String             @unique
  employeeRoles  EmployeeRole[]
}

model EmployeeRole {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  employeeId  String   @db.ObjectId
  roleId      String   @db.ObjectId
  employee    Employee @relation(fields: [employeeId], references: [id])
  role        Role     @relation(fields: [roleId], references: [id])
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

model Payroll {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  employee       Employee @relation(fields: [employeeId], references: [id])
  employeeId     String   @db.ObjectId
  baseSalary     Float
  bonuses        Bonus[]
  penalties      Penalty[]
  finalSalary    Float
  processedDate  DateTime
}

model Bonus {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  payroll        Payroll  @relation(fields: [payrollId], references: [id])
  payrollId      String   @db.ObjectId
  amount         Float
  reason         String
}

model Penalty {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  payroll        Payroll  @relation(fields: [payrollId], references: [id])
  payrollId      String   @db.ObjectId
  amount         Float
  reason         String
}
